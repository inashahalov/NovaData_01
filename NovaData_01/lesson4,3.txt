-- Таблица сырых логов событий
CREATE TABLE user_events (
    user_id UInt32,
    event_type String,
    points_spent UInt32,
    event_time DateTime
)
ENGINE = MergeTree()
ORDER BY (event_time, user_id)
TTL event_time + INTERVAL 30 DAY;

-- Агрегированная таблица
CREATE TABLE aggregated_user_events (
    event_date Date,
    event_type String,
    unique_users AggregateFunction(uniq, UInt32),
    total_spent AggregateFunction(sum, UInt32),
    total_actions AggregateFunction(count, UInt32)
)
ENGINE = MergeTree()
ORDER BY (event_date, event_type)
TTL event_date + INTERVAL 180 DAY;

-- Materialized View для обновления агрегированной таблицы
CREATE MATERIALIZED VIEW mv_aggregated_user_events TO aggregated_user_events AS
SELECT
    toDate(event_time) AS event_date,
    event_type,
    uniqState(user_id) AS unique_users,
    sumState(points_spent) AS total_spent,
    countState() AS total_actions
FROM user_events
GROUP BY event_date, event_type;

-- Вставка тестовых данных
INSERT INTO user_events VALUES
(1, 'login', 0, now() - INTERVAL 10 DAY),
(2, 'signup', 0, now() - INTERVAL 10 DAY),
(3, 'login', 0, now() - INTERVAL 10 DAY),
(1, 'login', 0, now() - INTERVAL 7 DAY),
(2, 'login', 0, now() - INTERVAL 7 DAY),
(3, 'purchase', 30, now() - INTERVAL 7 DAY),
(1, 'purchase', 50, now() - INTERVAL 5 DAY),
(2, 'logout', 0, now() - INTERVAL 5 DAY),
(4, 'login', 0, now() - INTERVAL 5 DAY),
(1, 'login', 0, now() - INTERVAL 3 DAY),
(3, 'purchase', 70, now() - INTERVAL 3 DAY),
(5, 'signup', 0, now() - INTERVAL 3 DAY),
(2, 'purchase', 20, now() - INTERVAL 1 DAY),
(4, 'logout', 0, now() - INTERVAL 1 DAY),
(5, 'login', 0, now() - INTERVAL 1 DAY),
(1, 'purchase', 25, now()),
(2, 'login', 0, now()),
(3, 'logout', 0, now()),
(6, 'signup', 0, now()),
(6, 'purchase', 100, now());

-- Запрос для расчета Retention (7 дней)
WITH 
first_events AS (
    SELECT 
        user_id,
        min(event_time) AS first_event_date
    FROM user_events
    GROUP BY user_id
),
retention_check AS (
    SELECT 
        fe.user_id,
        fe.first_event_date,
        ue.event_time AS return_event_time
    FROM first_events fe
    LEFT JOIN user_events ue
        ON fe.user_id = ue.user_id
        AND ue.event_time >= fe.first_event_date + INTERVAL 7 DAY
        AND ue.event_time < fe.first_event_date + INTERVAL 8 DAY
)
SELECT 
    COUNT(DISTINCT fe.user_id) AS total_users_day_0,
    COUNT(DISTINCT rc.user_id) AS returned_in_7_days,
    round(COUNT(DISTINCT rc.user_id) / COUNT(DISTINCT fe.user_id) * 100, 2) AS retention_7d_percent
FROM first_events fe
LEFT JOIN retention_check rc
    ON fe.user_id = rc.user_id;

-- Запрос для быстрой аналитики по дням
SELECT 
    event_date,
    event_type,
    uniqMerge(unique_users) AS unique_users,
    sumMerge(total_spent) AS total_spent,
    countMerge(total_actions) AS total_actions
FROM aggregated_user_events
GROUP BY event_date, event_type
ORDER BY event_date, event_type;
